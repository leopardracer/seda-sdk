// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/pubkey/v1/query.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { ValidatorPubKeys } from "./genesis";

/**
 * QueryValidatorKeysRequest is request type for the Query/ValidatorKeys RPC
 * method.
 */
export interface QueryValidatorKeysRequest {
  validatorAddr: string;
}

/**
 * QueryValidatorKeysResponse is response type for the Query/ValidatorKeys RPC
 * method.
 */
export interface QueryValidatorKeysResponse {
  validatorPubKeys: ValidatorPubKeys | undefined;
}

function createBaseQueryValidatorKeysRequest(): QueryValidatorKeysRequest {
  return { validatorAddr: "" };
}

export const QueryValidatorKeysRequest = {
  encode(message: QueryValidatorKeysRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorAddr !== "") {
      writer.uint32(10).string(message.validatorAddr);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryValidatorKeysRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validatorAddr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryValidatorKeysRequest {
    return { validatorAddr: isSet(object.validatorAddr) ? globalThis.String(object.validatorAddr) : "" };
  },

  toJSON(message: QueryValidatorKeysRequest): unknown {
    const obj: any = {};
    if (message.validatorAddr !== "") {
      obj.validatorAddr = message.validatorAddr;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryValidatorKeysRequest>): QueryValidatorKeysRequest {
    return QueryValidatorKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryValidatorKeysRequest>): QueryValidatorKeysRequest {
    const message = createBaseQueryValidatorKeysRequest();
    message.validatorAddr = object.validatorAddr ?? "";
    return message;
  },
};

function createBaseQueryValidatorKeysResponse(): QueryValidatorKeysResponse {
  return { validatorPubKeys: undefined };
}

export const QueryValidatorKeysResponse = {
  encode(message: QueryValidatorKeysResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorPubKeys !== undefined) {
      ValidatorPubKeys.encode(message.validatorPubKeys, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryValidatorKeysResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryValidatorKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validatorPubKeys = ValidatorPubKeys.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryValidatorKeysResponse {
    return {
      validatorPubKeys: isSet(object.validatorPubKeys) ? ValidatorPubKeys.fromJSON(object.validatorPubKeys) : undefined,
    };
  },

  toJSON(message: QueryValidatorKeysResponse): unknown {
    const obj: any = {};
    if (message.validatorPubKeys !== undefined) {
      obj.validatorPubKeys = ValidatorPubKeys.toJSON(message.validatorPubKeys);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryValidatorKeysResponse>): QueryValidatorKeysResponse {
    return QueryValidatorKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryValidatorKeysResponse>): QueryValidatorKeysResponse {
    const message = createBaseQueryValidatorKeysResponse();
    message.validatorPubKeys = (object.validatorPubKeys !== undefined && object.validatorPubKeys !== null)
      ? ValidatorPubKeys.fromPartial(object.validatorPubKeys)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** ValidatorKeys returns a given validator's registered keys. */
  ValidatorKeys(request: QueryValidatorKeysRequest): Promise<QueryValidatorKeysResponse>;
}

export const QueryServiceName = "sedachain.pubkey.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.ValidatorKeys = this.ValidatorKeys.bind(this);
  }
  ValidatorKeys(request: QueryValidatorKeysRequest): Promise<QueryValidatorKeysResponse> {
    const data = QueryValidatorKeysRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ValidatorKeys", data);
    return promise.then((data) => QueryValidatorKeysResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/pubkey/v1/genesis.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { IndexedPubKey } from "./pubkey";

/** GenesisState defines pubkey module's genesis state. */
export interface GenesisState {
  validatorPubKeys: ValidatorPubKeys[];
}

/**
 * ValidatorPubKeys defines a validator's list of registered public keys
 * primarily used in the x/pubkey genesis state.
 */
export interface ValidatorPubKeys {
  validatorAddr: string;
  indexedPubKeys: IndexedPubKey[];
}

function createBaseGenesisState(): GenesisState {
  return { validatorPubKeys: [] };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.validatorPubKeys) {
      ValidatorPubKeys.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validatorPubKeys.push(ValidatorPubKeys.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      validatorPubKeys: globalThis.Array.isArray(object?.validatorPubKeys)
        ? object.validatorPubKeys.map((e: any) => ValidatorPubKeys.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.validatorPubKeys?.length) {
      obj.validatorPubKeys = message.validatorPubKeys.map((e) => ValidatorPubKeys.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.validatorPubKeys = object.validatorPubKeys?.map((e) => ValidatorPubKeys.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValidatorPubKeys(): ValidatorPubKeys {
  return { validatorAddr: "", indexedPubKeys: [] };
}

export const ValidatorPubKeys = {
  encode(message: ValidatorPubKeys, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorAddr !== "") {
      writer.uint32(10).string(message.validatorAddr);
    }
    for (const v of message.indexedPubKeys) {
      IndexedPubKey.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorPubKeys {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorPubKeys();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validatorAddr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.indexedPubKeys.push(IndexedPubKey.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorPubKeys {
    return {
      validatorAddr: isSet(object.validatorAddr) ? globalThis.String(object.validatorAddr) : "",
      indexedPubKeys: globalThis.Array.isArray(object?.indexedPubKeys)
        ? object.indexedPubKeys.map((e: any) => IndexedPubKey.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValidatorPubKeys): unknown {
    const obj: any = {};
    if (message.validatorAddr !== "") {
      obj.validatorAddr = message.validatorAddr;
    }
    if (message.indexedPubKeys?.length) {
      obj.indexedPubKeys = message.indexedPubKeys.map((e) => IndexedPubKey.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ValidatorPubKeys>): ValidatorPubKeys {
    return ValidatorPubKeys.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidatorPubKeys>): ValidatorPubKeys {
    const message = createBaseValidatorPubKeys();
    message.validatorAddr = object.validatorAddr ?? "";
    message.indexedPubKeys = object.indexedPubKeys?.map((e) => IndexedPubKey.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/tally/v1/tally.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

/** Params defines the parameters for the tally module. */
export interface Params {
  /** MaxTallyGasLimit is the maximum gas limit for a tally request. */
  maxTallyGasLimit: bigint;
  /** FilterGasCostNone is the gas cost for a filter type none. */
  filterGasCostNone: bigint;
  /**
   * FilterGasCostMultiplierMode is the gas cost multiplier for a filter type
   * mode.
   */
  filterGasCostMultiplierMode: bigint;
  /**
   * FilterGasCostMAD is the gas cost multiplier for a filter type
   * Median Absolute Deviation.
   */
  filterGasCostMultiplierMAD: bigint;
  /** GasCostBase is the base gas cost for a data request. */
  gasCostBase: bigint;
  /**
   * GasCostFallback is the gas cost incurred for data request execution when
   * even basic consensus has not been reached.
   */
  executionGasCostFallback: bigint;
  /**
   * BurnRatio is the ratio of the gas cost to be burned in case of reduced
   * payout scenarios.
   */
  burnRatio: string;
  /** MaxResultSize is the maximum size of the result of a data request in bytes. */
  maxResultSize: number;
  /** MaxTalliesPerBlock specifies the maximum number of tallies per block. */
  maxTalliesPerBlock: number;
}

function createBaseParams(): Params {
  return {
    maxTallyGasLimit: 0n,
    filterGasCostNone: 0n,
    filterGasCostMultiplierMode: 0n,
    filterGasCostMultiplierMAD: 0n,
    gasCostBase: 0n,
    executionGasCostFallback: 0n,
    burnRatio: "",
    maxResultSize: 0,
    maxTalliesPerBlock: 0,
  };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxTallyGasLimit !== 0n) {
      if (BigInt.asUintN(64, message.maxTallyGasLimit) !== message.maxTallyGasLimit) {
        throw new globalThis.Error("value provided for field message.maxTallyGasLimit of type uint64 too large");
      }
      writer.uint32(8).uint64(message.maxTallyGasLimit.toString());
    }
    if (message.filterGasCostNone !== 0n) {
      if (BigInt.asUintN(64, message.filterGasCostNone) !== message.filterGasCostNone) {
        throw new globalThis.Error("value provided for field message.filterGasCostNone of type uint64 too large");
      }
      writer.uint32(16).uint64(message.filterGasCostNone.toString());
    }
    if (message.filterGasCostMultiplierMode !== 0n) {
      if (BigInt.asUintN(64, message.filterGasCostMultiplierMode) !== message.filterGasCostMultiplierMode) {
        throw new globalThis.Error(
          "value provided for field message.filterGasCostMultiplierMode of type uint64 too large",
        );
      }
      writer.uint32(24).uint64(message.filterGasCostMultiplierMode.toString());
    }
    if (message.filterGasCostMultiplierMAD !== 0n) {
      if (BigInt.asUintN(64, message.filterGasCostMultiplierMAD) !== message.filterGasCostMultiplierMAD) {
        throw new globalThis.Error(
          "value provided for field message.filterGasCostMultiplierMAD of type uint64 too large",
        );
      }
      writer.uint32(32).uint64(message.filterGasCostMultiplierMAD.toString());
    }
    if (message.gasCostBase !== 0n) {
      if (BigInt.asUintN(64, message.gasCostBase) !== message.gasCostBase) {
        throw new globalThis.Error("value provided for field message.gasCostBase of type uint64 too large");
      }
      writer.uint32(40).uint64(message.gasCostBase.toString());
    }
    if (message.executionGasCostFallback !== 0n) {
      if (BigInt.asUintN(64, message.executionGasCostFallback) !== message.executionGasCostFallback) {
        throw new globalThis.Error(
          "value provided for field message.executionGasCostFallback of type uint64 too large",
        );
      }
      writer.uint32(48).uint64(message.executionGasCostFallback.toString());
    }
    if (message.burnRatio !== "") {
      writer.uint32(58).string(message.burnRatio);
    }
    if (message.maxResultSize !== 0) {
      writer.uint32(64).uint32(message.maxResultSize);
    }
    if (message.maxTalliesPerBlock !== 0) {
      writer.uint32(72).uint32(message.maxTalliesPerBlock);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxTallyGasLimit = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.filterGasCostNone = longToBigint(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.filterGasCostMultiplierMode = longToBigint(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.filterGasCostMultiplierMAD = longToBigint(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.gasCostBase = longToBigint(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.executionGasCostFallback = longToBigint(reader.uint64() as Long);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.burnRatio = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.maxResultSize = reader.uint32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.maxTalliesPerBlock = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      maxTallyGasLimit: isSet(object.maxTallyGasLimit) ? BigInt(object.maxTallyGasLimit) : 0n,
      filterGasCostNone: isSet(object.filterGasCostNone) ? BigInt(object.filterGasCostNone) : 0n,
      filterGasCostMultiplierMode: isSet(object.filterGasCostMultiplierMode)
        ? BigInt(object.filterGasCostMultiplierMode)
        : 0n,
      filterGasCostMultiplierMAD: isSet(object.filterGasCostMultiplierMAD)
        ? BigInt(object.filterGasCostMultiplierMAD)
        : 0n,
      gasCostBase: isSet(object.gasCostBase) ? BigInt(object.gasCostBase) : 0n,
      executionGasCostFallback: isSet(object.executionGasCostFallback) ? BigInt(object.executionGasCostFallback) : 0n,
      burnRatio: isSet(object.burnRatio) ? globalThis.String(object.burnRatio) : "",
      maxResultSize: isSet(object.maxResultSize) ? globalThis.Number(object.maxResultSize) : 0,
      maxTalliesPerBlock: isSet(object.maxTalliesPerBlock) ? globalThis.Number(object.maxTalliesPerBlock) : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.maxTallyGasLimit !== 0n) {
      obj.maxTallyGasLimit = message.maxTallyGasLimit.toString();
    }
    if (message.filterGasCostNone !== 0n) {
      obj.filterGasCostNone = message.filterGasCostNone.toString();
    }
    if (message.filterGasCostMultiplierMode !== 0n) {
      obj.filterGasCostMultiplierMode = message.filterGasCostMultiplierMode.toString();
    }
    if (message.filterGasCostMultiplierMAD !== 0n) {
      obj.filterGasCostMultiplierMAD = message.filterGasCostMultiplierMAD.toString();
    }
    if (message.gasCostBase !== 0n) {
      obj.gasCostBase = message.gasCostBase.toString();
    }
    if (message.executionGasCostFallback !== 0n) {
      obj.executionGasCostFallback = message.executionGasCostFallback.toString();
    }
    if (message.burnRatio !== "") {
      obj.burnRatio = message.burnRatio;
    }
    if (message.maxResultSize !== 0) {
      obj.maxResultSize = Math.round(message.maxResultSize);
    }
    if (message.maxTalliesPerBlock !== 0) {
      obj.maxTalliesPerBlock = Math.round(message.maxTalliesPerBlock);
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.maxTallyGasLimit = object.maxTallyGasLimit ?? 0n;
    message.filterGasCostNone = object.filterGasCostNone ?? 0n;
    message.filterGasCostMultiplierMode = object.filterGasCostMultiplierMode ?? 0n;
    message.filterGasCostMultiplierMAD = object.filterGasCostMultiplierMAD ?? 0n;
    message.gasCostBase = object.gasCostBase ?? 0n;
    message.executionGasCostFallback = object.executionGasCostFallback ?? 0n;
    message.burnRatio = object.burnRatio ?? "";
    message.maxResultSize = object.maxResultSize ?? 0;
    message.maxTalliesPerBlock = object.maxTalliesPerBlock ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

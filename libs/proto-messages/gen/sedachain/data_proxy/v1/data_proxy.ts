// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: sedachain/data_proxy/v1/data_proxy.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

/** Module parameters which can be changed through governance. */
export interface Params {
  /**
   * min_fee_update_delay is the minimum number of blocks after which a fee
   * update comes into effect.
   */
  minFeeUpdateDelay: number;
}

/** ProxyConfig defines a data-proxy entry in the registry. */
export interface ProxyConfig {
  /**
   * payout_address defines the address to which the data proxy fees should be
   * transferred.
   */
  payoutAddress: string;
  /** fee defines the amount in aseda this data-proxy charges when utilised. */
  fee:
    | Coin
    | undefined;
  /** memo defines an optional string which is not used by the protocol. */
  memo: string;
  /** only the admin address of a data proxy can submit config updates. */
  adminAddress: string;
  /**
   * fee_update defines an upcoming fee change which will take effect at a
   * future height.
   */
  feeUpdate: FeeUpdate | undefined;
}

/**
 * FeeUpdate defines a new fee amount and the height at which it will take
 * effect.
 */
export interface FeeUpdate {
  /** new_fee defines the new fee for the data proxy. */
  newFee:
    | Coin
    | undefined;
  /** update_height defines the height after which the new fee comes into effect. */
  updateHeight: number;
}

function createBaseParams(): Params {
  return { minFeeUpdateDelay: 0 };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minFeeUpdateDelay !== 0) {
      writer.uint32(8).uint32(message.minFeeUpdateDelay);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minFeeUpdateDelay = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return { minFeeUpdateDelay: isSet(object.minFeeUpdateDelay) ? globalThis.Number(object.minFeeUpdateDelay) : 0 };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.minFeeUpdateDelay !== 0) {
      obj.minFeeUpdateDelay = Math.round(message.minFeeUpdateDelay);
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.minFeeUpdateDelay = object.minFeeUpdateDelay ?? 0;
    return message;
  },
};

function createBaseProxyConfig(): ProxyConfig {
  return { payoutAddress: "", fee: undefined, memo: "", adminAddress: "", feeUpdate: undefined };
}

export const ProxyConfig = {
  encode(message: ProxyConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.payoutAddress !== "") {
      writer.uint32(10).string(message.payoutAddress);
    }
    if (message.fee !== undefined) {
      Coin.encode(message.fee, writer.uint32(18).fork()).ldelim();
    }
    if (message.memo !== "") {
      writer.uint32(26).string(message.memo);
    }
    if (message.adminAddress !== "") {
      writer.uint32(34).string(message.adminAddress);
    }
    if (message.feeUpdate !== undefined) {
      FeeUpdate.encode(message.feeUpdate, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProxyConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProxyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.payoutAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fee = Coin.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.memo = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.adminAddress = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.feeUpdate = FeeUpdate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProxyConfig {
    return {
      payoutAddress: isSet(object.payoutAddress) ? globalThis.String(object.payoutAddress) : "",
      fee: isSet(object.fee) ? Coin.fromJSON(object.fee) : undefined,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
      adminAddress: isSet(object.adminAddress) ? globalThis.String(object.adminAddress) : "",
      feeUpdate: isSet(object.feeUpdate) ? FeeUpdate.fromJSON(object.feeUpdate) : undefined,
    };
  },

  toJSON(message: ProxyConfig): unknown {
    const obj: any = {};
    if (message.payoutAddress !== "") {
      obj.payoutAddress = message.payoutAddress;
    }
    if (message.fee !== undefined) {
      obj.fee = Coin.toJSON(message.fee);
    }
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    if (message.adminAddress !== "") {
      obj.adminAddress = message.adminAddress;
    }
    if (message.feeUpdate !== undefined) {
      obj.feeUpdate = FeeUpdate.toJSON(message.feeUpdate);
    }
    return obj;
  },

  create(base?: DeepPartial<ProxyConfig>): ProxyConfig {
    return ProxyConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProxyConfig>): ProxyConfig {
    const message = createBaseProxyConfig();
    message.payoutAddress = object.payoutAddress ?? "";
    message.fee = (object.fee !== undefined && object.fee !== null) ? Coin.fromPartial(object.fee) : undefined;
    message.memo = object.memo ?? "";
    message.adminAddress = object.adminAddress ?? "";
    message.feeUpdate = (object.feeUpdate !== undefined && object.feeUpdate !== null)
      ? FeeUpdate.fromPartial(object.feeUpdate)
      : undefined;
    return message;
  },
};

function createBaseFeeUpdate(): FeeUpdate {
  return { newFee: undefined, updateHeight: 0 };
}

export const FeeUpdate = {
  encode(message: FeeUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.newFee !== undefined) {
      Coin.encode(message.newFee, writer.uint32(10).fork()).ldelim();
    }
    if (message.updateHeight !== 0) {
      writer.uint32(16).int64(message.updateHeight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FeeUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeeUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.newFee = Coin.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.updateHeight = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeeUpdate {
    return {
      newFee: isSet(object.newFee) ? Coin.fromJSON(object.newFee) : undefined,
      updateHeight: isSet(object.updateHeight) ? globalThis.Number(object.updateHeight) : 0,
    };
  },

  toJSON(message: FeeUpdate): unknown {
    const obj: any = {};
    if (message.newFee !== undefined) {
      obj.newFee = Coin.toJSON(message.newFee);
    }
    if (message.updateHeight !== 0) {
      obj.updateHeight = Math.round(message.updateHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<FeeUpdate>): FeeUpdate {
    return FeeUpdate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeeUpdate>): FeeUpdate {
    const message = createBaseFeeUpdate();
    message.newFee = (object.newFee !== undefined && object.newFee !== null)
      ? Coin.fromPartial(object.newFee)
      : undefined;
    message.updateHeight = object.updateHeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

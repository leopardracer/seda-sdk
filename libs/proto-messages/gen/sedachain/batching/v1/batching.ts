// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/batching/v1/batching.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

/**
 * Batch is an aggregation of data request results along with validator
 * signatures used to prove these results on destination chains.
 */
export interface Batch {
  /**
   * batch_number is a unique identifier of the batch incremented
   * every time a batch is created.
   */
  batchNumber: number;
  /** block_height is the height at which the batch was created. */
  blockHeight: number;
  /**
   * current_data_result_root is the hex-encoded root of the data result
   * merkle tree.
   */
  currentDataResultRoot: string;
  /**
   * data_result_root is the hex-encoded "super root" of the previous
   * data result and current data result roots.
   */
  dataResultRoot: string;
  /**
   * validator_root is the hex-encoded root of the validator merkle
   * tree.
   */
  validatorRoot: string;
  /** batch_id is the Keccack-256 hash of the batch content. */
  batchId: Uint8Array;
  /** proving_medatada is a field for additional proving data. */
  provingMedatada: Uint8Array;
}

/**
 * TreeEntries are the given batch's data result tree entries and
 * validator tree entries.
 */
export interface TreeEntries {
  /** batch_number is the identifier of the batch the tree entries from. */
  batchNumber: number;
  /**
   * data_result_entries are the entries (unhashed leaf contents) of
   * the data result tree.
   */
  dataResultEntries: Uint8Array[];
  /**
   * validator_entries are the entries (unhashed leaf contents) of
   * the validator tree.
   */
  validatorEntries: Uint8Array[];
}

/**
 * BatchSignatures contains basic validator data and its batch signatures
 * under various cryptographic schemes.
 */
export interface BatchSignatures {
  validatorAddr: string;
  signatures: Uint8Array;
}

/** Params is a list of parameters which can be changed through governance. */
export interface Params {
  /**
   * validator_set_trim_percent is the percentage of the validator
   * set to store in the validator merkle tree in the batch.
   */
  validatorSetTrimPercent: number;
}

/** DataResult represents the result of a resolved data request. */
export interface DataResult {
  /** id is the Keccack-256 hash of the data result. */
  id: string;
  /** dr_id is the data request identifier. */
  drId: string;
  /** version is a semantic version string. */
  version: string;
  /** block_height is the height at which the data request was tallied. */
  blockHeight: number;
  /** exit_code is the exit code of the tally wasm binary execution. */
  exitCode: number;
  /** gas_used is the gas used by the data request execution. */
  gasUsed: number;
  /** result is the result of the tally wasm binary execution. */
  result: Uint8Array;
  /** payback_address is the payback address set by the relayer. */
  paybackAddress: string;
  /**
   * seda_payload is the payload set by SEDA Protocol (e.g. OEV-enabled
   * data requests)
   */
  sedaPayload: string;
  /**
   * consensus indicates whether consensus was reached in the tally
   * process.
   */
  consensus: boolean;
}

function createBaseBatch(): Batch {
  return {
    batchNumber: 0,
    blockHeight: 0,
    currentDataResultRoot: "",
    dataResultRoot: "",
    validatorRoot: "",
    batchId: new Uint8Array(0),
    provingMedatada: new Uint8Array(0),
  };
}

export const Batch = {
  encode(message: Batch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNumber !== 0) {
      writer.uint32(8).uint64(message.batchNumber);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.currentDataResultRoot !== "") {
      writer.uint32(26).string(message.currentDataResultRoot);
    }
    if (message.dataResultRoot !== "") {
      writer.uint32(34).string(message.dataResultRoot);
    }
    if (message.validatorRoot !== "") {
      writer.uint32(42).string(message.validatorRoot);
    }
    if (message.batchId.length !== 0) {
      writer.uint32(50).bytes(message.batchId);
    }
    if (message.provingMedatada.length !== 0) {
      writer.uint32(58).bytes(message.provingMedatada);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Batch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batchNumber = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.currentDataResultRoot = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.dataResultRoot = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.validatorRoot = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.batchId = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.provingMedatada = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Batch {
    return {
      batchNumber: isSet(object.batchNumber) ? globalThis.Number(object.batchNumber) : 0,
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      currentDataResultRoot: isSet(object.currentDataResultRoot) ? globalThis.String(object.currentDataResultRoot) : "",
      dataResultRoot: isSet(object.dataResultRoot) ? globalThis.String(object.dataResultRoot) : "",
      validatorRoot: isSet(object.validatorRoot) ? globalThis.String(object.validatorRoot) : "",
      batchId: isSet(object.batchId) ? bytesFromBase64(object.batchId) : new Uint8Array(0),
      provingMedatada: isSet(object.provingMedatada) ? bytesFromBase64(object.provingMedatada) : new Uint8Array(0),
    };
  },

  toJSON(message: Batch): unknown {
    const obj: any = {};
    if (message.batchNumber !== 0) {
      obj.batchNumber = Math.round(message.batchNumber);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.currentDataResultRoot !== "") {
      obj.currentDataResultRoot = message.currentDataResultRoot;
    }
    if (message.dataResultRoot !== "") {
      obj.dataResultRoot = message.dataResultRoot;
    }
    if (message.validatorRoot !== "") {
      obj.validatorRoot = message.validatorRoot;
    }
    if (message.batchId.length !== 0) {
      obj.batchId = base64FromBytes(message.batchId);
    }
    if (message.provingMedatada.length !== 0) {
      obj.provingMedatada = base64FromBytes(message.provingMedatada);
    }
    return obj;
  },

  create(base?: DeepPartial<Batch>): Batch {
    return Batch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Batch>): Batch {
    const message = createBaseBatch();
    message.batchNumber = object.batchNumber ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    message.currentDataResultRoot = object.currentDataResultRoot ?? "";
    message.dataResultRoot = object.dataResultRoot ?? "";
    message.validatorRoot = object.validatorRoot ?? "";
    message.batchId = object.batchId ?? new Uint8Array(0);
    message.provingMedatada = object.provingMedatada ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTreeEntries(): TreeEntries {
  return { batchNumber: 0, dataResultEntries: [], validatorEntries: [] };
}

export const TreeEntries = {
  encode(message: TreeEntries, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNumber !== 0) {
      writer.uint32(8).uint64(message.batchNumber);
    }
    for (const v of message.dataResultEntries) {
      writer.uint32(18).bytes(v!);
    }
    for (const v of message.validatorEntries) {
      writer.uint32(26).bytes(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TreeEntries {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreeEntries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batchNumber = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dataResultEntries.push(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validatorEntries.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TreeEntries {
    return {
      batchNumber: isSet(object.batchNumber) ? globalThis.Number(object.batchNumber) : 0,
      dataResultEntries: globalThis.Array.isArray(object?.dataResultEntries)
        ? object.dataResultEntries.map((e: any) => bytesFromBase64(e))
        : [],
      validatorEntries: globalThis.Array.isArray(object?.validatorEntries)
        ? object.validatorEntries.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: TreeEntries): unknown {
    const obj: any = {};
    if (message.batchNumber !== 0) {
      obj.batchNumber = Math.round(message.batchNumber);
    }
    if (message.dataResultEntries?.length) {
      obj.dataResultEntries = message.dataResultEntries.map((e) => base64FromBytes(e));
    }
    if (message.validatorEntries?.length) {
      obj.validatorEntries = message.validatorEntries.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TreeEntries>): TreeEntries {
    return TreeEntries.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TreeEntries>): TreeEntries {
    const message = createBaseTreeEntries();
    message.batchNumber = object.batchNumber ?? 0;
    message.dataResultEntries = object.dataResultEntries?.map((e) => e) || [];
    message.validatorEntries = object.validatorEntries?.map((e) => e) || [];
    return message;
  },
};

function createBaseBatchSignatures(): BatchSignatures {
  return { validatorAddr: "", signatures: new Uint8Array(0) };
}

export const BatchSignatures = {
  encode(message: BatchSignatures, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorAddr !== "") {
      writer.uint32(10).string(message.validatorAddr);
    }
    if (message.signatures.length !== 0) {
      writer.uint32(18).bytes(message.signatures);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchSignatures {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchSignatures();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validatorAddr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signatures = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchSignatures {
    return {
      validatorAddr: isSet(object.validatorAddr) ? globalThis.String(object.validatorAddr) : "",
      signatures: isSet(object.signatures) ? bytesFromBase64(object.signatures) : new Uint8Array(0),
    };
  },

  toJSON(message: BatchSignatures): unknown {
    const obj: any = {};
    if (message.validatorAddr !== "") {
      obj.validatorAddr = message.validatorAddr;
    }
    if (message.signatures.length !== 0) {
      obj.signatures = base64FromBytes(message.signatures);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchSignatures>): BatchSignatures {
    return BatchSignatures.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchSignatures>): BatchSignatures {
    const message = createBaseBatchSignatures();
    message.validatorAddr = object.validatorAddr ?? "";
    message.signatures = object.signatures ?? new Uint8Array(0);
    return message;
  },
};

function createBaseParams(): Params {
  return { validatorSetTrimPercent: 0 };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validatorSetTrimPercent !== 0) {
      writer.uint32(8).uint32(message.validatorSetTrimPercent);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.validatorSetTrimPercent = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      validatorSetTrimPercent: isSet(object.validatorSetTrimPercent)
        ? globalThis.Number(object.validatorSetTrimPercent)
        : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.validatorSetTrimPercent !== 0) {
      obj.validatorSetTrimPercent = Math.round(message.validatorSetTrimPercent);
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.validatorSetTrimPercent = object.validatorSetTrimPercent ?? 0;
    return message;
  },
};

function createBaseDataResult(): DataResult {
  return {
    id: "",
    drId: "",
    version: "",
    blockHeight: 0,
    exitCode: 0,
    gasUsed: 0,
    result: new Uint8Array(0),
    paybackAddress: "",
    sedaPayload: "",
    consensus: false,
  };
}

export const DataResult = {
  encode(message: DataResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.drId !== "") {
      writer.uint32(18).string(message.drId);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(32).uint64(message.blockHeight);
    }
    if (message.exitCode !== 0) {
      writer.uint32(40).uint32(message.exitCode);
    }
    if (message.gasUsed !== 0) {
      writer.uint32(48).uint64(message.gasUsed);
    }
    if (message.result.length !== 0) {
      writer.uint32(58).bytes(message.result);
    }
    if (message.paybackAddress !== "") {
      writer.uint32(66).string(message.paybackAddress);
    }
    if (message.sedaPayload !== "") {
      writer.uint32(74).string(message.sedaPayload);
    }
    if (message.consensus !== false) {
      writer.uint32(80).bool(message.consensus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DataResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.drId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.exitCode = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gasUsed = longToNumber(reader.uint64() as Long);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.result = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.paybackAddress = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.sedaPayload = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.consensus = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataResult {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      drId: isSet(object.drId) ? globalThis.String(object.drId) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      exitCode: isSet(object.exitCode) ? globalThis.Number(object.exitCode) : 0,
      gasUsed: isSet(object.gasUsed) ? globalThis.Number(object.gasUsed) : 0,
      result: isSet(object.result) ? bytesFromBase64(object.result) : new Uint8Array(0),
      paybackAddress: isSet(object.paybackAddress) ? globalThis.String(object.paybackAddress) : "",
      sedaPayload: isSet(object.sedaPayload) ? globalThis.String(object.sedaPayload) : "",
      consensus: isSet(object.consensus) ? globalThis.Boolean(object.consensus) : false,
    };
  },

  toJSON(message: DataResult): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.drId !== "") {
      obj.drId = message.drId;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.exitCode !== 0) {
      obj.exitCode = Math.round(message.exitCode);
    }
    if (message.gasUsed !== 0) {
      obj.gasUsed = Math.round(message.gasUsed);
    }
    if (message.result.length !== 0) {
      obj.result = base64FromBytes(message.result);
    }
    if (message.paybackAddress !== "") {
      obj.paybackAddress = message.paybackAddress;
    }
    if (message.sedaPayload !== "") {
      obj.sedaPayload = message.sedaPayload;
    }
    if (message.consensus !== false) {
      obj.consensus = message.consensus;
    }
    return obj;
  },

  create(base?: DeepPartial<DataResult>): DataResult {
    return DataResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataResult>): DataResult {
    const message = createBaseDataResult();
    message.id = object.id ?? "";
    message.drId = object.drId ?? "";
    message.version = object.version ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.exitCode = object.exitCode ?? 0;
    message.gasUsed = object.gasUsed ?? 0;
    message.result = object.result ?? new Uint8Array(0);
    message.paybackAddress = object.paybackAddress ?? "";
    message.sedaPayload = object.sedaPayload ?? "";
    message.consensus = object.consensus ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

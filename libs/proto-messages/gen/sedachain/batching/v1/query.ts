// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/batching/v1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Batch, BatchSignatures, DataResult, TreeEntries } from "./batching";

/** The request message for QueryBatch RPC. */
export interface QueryBatchRequest {
  batchNumber: number;
}

/** The response message for QueryBatch RPC. */
export interface QueryBatchResponse {
  batch: Batch | undefined;
}

/** The request message for BatchForHeight RPC. */
export interface QueryBatchForHeightRequest {
  blockHeight: number;
}

/** The response message for BatchForHeight RPC. */
export interface QueryBatchForHeightResponse {
  batch: Batch | undefined;
}

/** The request message for QueryBatches RPC. */
export interface QueryBatchesRequest {
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/** The response message for QueryBatches RPC. */
export interface QueryBatchesResponse {
  batches: Batch[];
  pagination: PageResponse | undefined;
}

/** The request message for QueryTreeEntries RPC. */
export interface QueryTreeEntriesRequest {
  batchNumber: number;
}

/** The response message for QueryTreeEntries RPC. */
export interface QueryTreeEntriesResponse {
  entries: TreeEntries | undefined;
}

/** The request message for QueryBatchSignaturesRequest RPC. */
export interface QueryBatchSignaturesRequest {
  batchNumber: number;
}

/** The response message for QueryQueryBatchSignatures RPC. */
export interface QueryBatchSignaturesResponse {
  batchSigs: BatchSignatures[];
}

/** The request message for QueryDataResult RPC. */
export interface QueryDataResultRequest {
  dataRequestId: string;
}

/** The response message for QueryDataResult RPC. */
export interface QueryDataResultResponse {
  dataResult: DataResult | undefined;
}

/** The request message for QueryBatchAssignment RPC. */
export interface QueryBatchAssignmentRequest {
  dataRequestId: string;
}

/** The response message for QueryBatchAssignment RPC. */
export interface QueryBatchAssignmentResponse {
  batchNumber: number;
}

function createBaseQueryBatchRequest(): QueryBatchRequest {
  return { batchNumber: 0 };
}

export const QueryBatchRequest = {
  encode(message: QueryBatchRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNumber !== 0) {
      writer.uint32(8).uint64(message.batchNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batchNumber = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchRequest {
    return { batchNumber: isSet(object.batchNumber) ? globalThis.Number(object.batchNumber) : 0 };
  },

  toJSON(message: QueryBatchRequest): unknown {
    const obj: any = {};
    if (message.batchNumber !== 0) {
      obj.batchNumber = Math.round(message.batchNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchRequest>): QueryBatchRequest {
    return QueryBatchRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchRequest>): QueryBatchRequest {
    const message = createBaseQueryBatchRequest();
    message.batchNumber = object.batchNumber ?? 0;
    return message;
  },
};

function createBaseQueryBatchResponse(): QueryBatchResponse {
  return { batch: undefined };
}

export const QueryBatchResponse = {
  encode(message: QueryBatchResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batch !== undefined) {
      Batch.encode(message.batch, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batch = Batch.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchResponse {
    return { batch: isSet(object.batch) ? Batch.fromJSON(object.batch) : undefined };
  },

  toJSON(message: QueryBatchResponse): unknown {
    const obj: any = {};
    if (message.batch !== undefined) {
      obj.batch = Batch.toJSON(message.batch);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchResponse>): QueryBatchResponse {
    return QueryBatchResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchResponse>): QueryBatchResponse {
    const message = createBaseQueryBatchResponse();
    message.batch = (object.batch !== undefined && object.batch !== null) ? Batch.fromPartial(object.batch) : undefined;
    return message;
  },
};

function createBaseQueryBatchForHeightRequest(): QueryBatchForHeightRequest {
  return { blockHeight: 0 };
}

export const QueryBatchForHeightRequest = {
  encode(message: QueryBatchForHeightRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blockHeight !== 0) {
      writer.uint32(8).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchForHeightRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchForHeightRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchForHeightRequest {
    return { blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0 };
  },

  toJSON(message: QueryBatchForHeightRequest): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchForHeightRequest>): QueryBatchForHeightRequest {
    return QueryBatchForHeightRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchForHeightRequest>): QueryBatchForHeightRequest {
    const message = createBaseQueryBatchForHeightRequest();
    message.blockHeight = object.blockHeight ?? 0;
    return message;
  },
};

function createBaseQueryBatchForHeightResponse(): QueryBatchForHeightResponse {
  return { batch: undefined };
}

export const QueryBatchForHeightResponse = {
  encode(message: QueryBatchForHeightResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batch !== undefined) {
      Batch.encode(message.batch, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchForHeightResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchForHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batch = Batch.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchForHeightResponse {
    return { batch: isSet(object.batch) ? Batch.fromJSON(object.batch) : undefined };
  },

  toJSON(message: QueryBatchForHeightResponse): unknown {
    const obj: any = {};
    if (message.batch !== undefined) {
      obj.batch = Batch.toJSON(message.batch);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchForHeightResponse>): QueryBatchForHeightResponse {
    return QueryBatchForHeightResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchForHeightResponse>): QueryBatchForHeightResponse {
    const message = createBaseQueryBatchForHeightResponse();
    message.batch = (object.batch !== undefined && object.batch !== null) ? Batch.fromPartial(object.batch) : undefined;
    return message;
  },
};

function createBaseQueryBatchesRequest(): QueryBatchesRequest {
  return { pagination: undefined };
}

export const QueryBatchesRequest = {
  encode(message: QueryBatchesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryBatchesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchesRequest>): QueryBatchesRequest {
    return QueryBatchesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchesRequest>): QueryBatchesRequest {
    const message = createBaseQueryBatchesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryBatchesResponse(): QueryBatchesResponse {
  return { batches: [], pagination: undefined };
}

export const QueryBatchesResponse = {
  encode(message: QueryBatchesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.batches) {
      Batch.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batches.push(Batch.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchesResponse {
    return {
      batches: globalThis.Array.isArray(object?.batches) ? object.batches.map((e: any) => Batch.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryBatchesResponse): unknown {
    const obj: any = {};
    if (message.batches?.length) {
      obj.batches = message.batches.map((e) => Batch.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchesResponse>): QueryBatchesResponse {
    return QueryBatchesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchesResponse>): QueryBatchesResponse {
    const message = createBaseQueryBatchesResponse();
    message.batches = object.batches?.map((e) => Batch.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryTreeEntriesRequest(): QueryTreeEntriesRequest {
  return { batchNumber: 0 };
}

export const QueryTreeEntriesRequest = {
  encode(message: QueryTreeEntriesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNumber !== 0) {
      writer.uint32(8).uint64(message.batchNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTreeEntriesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTreeEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batchNumber = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTreeEntriesRequest {
    return { batchNumber: isSet(object.batchNumber) ? globalThis.Number(object.batchNumber) : 0 };
  },

  toJSON(message: QueryTreeEntriesRequest): unknown {
    const obj: any = {};
    if (message.batchNumber !== 0) {
      obj.batchNumber = Math.round(message.batchNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTreeEntriesRequest>): QueryTreeEntriesRequest {
    return QueryTreeEntriesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTreeEntriesRequest>): QueryTreeEntriesRequest {
    const message = createBaseQueryTreeEntriesRequest();
    message.batchNumber = object.batchNumber ?? 0;
    return message;
  },
};

function createBaseQueryTreeEntriesResponse(): QueryTreeEntriesResponse {
  return { entries: undefined };
}

export const QueryTreeEntriesResponse = {
  encode(message: QueryTreeEntriesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entries !== undefined) {
      TreeEntries.encode(message.entries, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryTreeEntriesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTreeEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entries = TreeEntries.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTreeEntriesResponse {
    return { entries: isSet(object.entries) ? TreeEntries.fromJSON(object.entries) : undefined };
  },

  toJSON(message: QueryTreeEntriesResponse): unknown {
    const obj: any = {};
    if (message.entries !== undefined) {
      obj.entries = TreeEntries.toJSON(message.entries);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryTreeEntriesResponse>): QueryTreeEntriesResponse {
    return QueryTreeEntriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryTreeEntriesResponse>): QueryTreeEntriesResponse {
    const message = createBaseQueryTreeEntriesResponse();
    message.entries = (object.entries !== undefined && object.entries !== null)
      ? TreeEntries.fromPartial(object.entries)
      : undefined;
    return message;
  },
};

function createBaseQueryBatchSignaturesRequest(): QueryBatchSignaturesRequest {
  return { batchNumber: 0 };
}

export const QueryBatchSignaturesRequest = {
  encode(message: QueryBatchSignaturesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNumber !== 0) {
      writer.uint32(8).uint64(message.batchNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchSignaturesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchSignaturesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batchNumber = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchSignaturesRequest {
    return { batchNumber: isSet(object.batchNumber) ? globalThis.Number(object.batchNumber) : 0 };
  },

  toJSON(message: QueryBatchSignaturesRequest): unknown {
    const obj: any = {};
    if (message.batchNumber !== 0) {
      obj.batchNumber = Math.round(message.batchNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchSignaturesRequest>): QueryBatchSignaturesRequest {
    return QueryBatchSignaturesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchSignaturesRequest>): QueryBatchSignaturesRequest {
    const message = createBaseQueryBatchSignaturesRequest();
    message.batchNumber = object.batchNumber ?? 0;
    return message;
  },
};

function createBaseQueryBatchSignaturesResponse(): QueryBatchSignaturesResponse {
  return { batchSigs: [] };
}

export const QueryBatchSignaturesResponse = {
  encode(message: QueryBatchSignaturesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.batchSigs) {
      BatchSignatures.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchSignaturesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchSignaturesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batchSigs.push(BatchSignatures.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchSignaturesResponse {
    return {
      batchSigs: globalThis.Array.isArray(object?.batchSigs)
        ? object.batchSigs.map((e: any) => BatchSignatures.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryBatchSignaturesResponse): unknown {
    const obj: any = {};
    if (message.batchSigs?.length) {
      obj.batchSigs = message.batchSigs.map((e) => BatchSignatures.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchSignaturesResponse>): QueryBatchSignaturesResponse {
    return QueryBatchSignaturesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchSignaturesResponse>): QueryBatchSignaturesResponse {
    const message = createBaseQueryBatchSignaturesResponse();
    message.batchSigs = object.batchSigs?.map((e) => BatchSignatures.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryDataResultRequest(): QueryDataResultRequest {
  return { dataRequestId: "" };
}

export const QueryDataResultRequest = {
  encode(message: QueryDataResultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.dataRequestId !== "") {
      writer.uint32(10).string(message.dataRequestId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDataResultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDataResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataRequestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDataResultRequest {
    return { dataRequestId: isSet(object.dataRequestId) ? globalThis.String(object.dataRequestId) : "" };
  },

  toJSON(message: QueryDataResultRequest): unknown {
    const obj: any = {};
    if (message.dataRequestId !== "") {
      obj.dataRequestId = message.dataRequestId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDataResultRequest>): QueryDataResultRequest {
    return QueryDataResultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDataResultRequest>): QueryDataResultRequest {
    const message = createBaseQueryDataResultRequest();
    message.dataRequestId = object.dataRequestId ?? "";
    return message;
  },
};

function createBaseQueryDataResultResponse(): QueryDataResultResponse {
  return { dataResult: undefined };
}

export const QueryDataResultResponse = {
  encode(message: QueryDataResultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.dataResult !== undefined) {
      DataResult.encode(message.dataResult, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDataResultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDataResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataResult = DataResult.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDataResultResponse {
    return { dataResult: isSet(object.dataResult) ? DataResult.fromJSON(object.dataResult) : undefined };
  },

  toJSON(message: QueryDataResultResponse): unknown {
    const obj: any = {};
    if (message.dataResult !== undefined) {
      obj.dataResult = DataResult.toJSON(message.dataResult);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDataResultResponse>): QueryDataResultResponse {
    return QueryDataResultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDataResultResponse>): QueryDataResultResponse {
    const message = createBaseQueryDataResultResponse();
    message.dataResult = (object.dataResult !== undefined && object.dataResult !== null)
      ? DataResult.fromPartial(object.dataResult)
      : undefined;
    return message;
  },
};

function createBaseQueryBatchAssignmentRequest(): QueryBatchAssignmentRequest {
  return { dataRequestId: "" };
}

export const QueryBatchAssignmentRequest = {
  encode(message: QueryBatchAssignmentRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.dataRequestId !== "") {
      writer.uint32(10).string(message.dataRequestId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchAssignmentRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchAssignmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataRequestId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchAssignmentRequest {
    return { dataRequestId: isSet(object.dataRequestId) ? globalThis.String(object.dataRequestId) : "" };
  },

  toJSON(message: QueryBatchAssignmentRequest): unknown {
    const obj: any = {};
    if (message.dataRequestId !== "") {
      obj.dataRequestId = message.dataRequestId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchAssignmentRequest>): QueryBatchAssignmentRequest {
    return QueryBatchAssignmentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchAssignmentRequest>): QueryBatchAssignmentRequest {
    const message = createBaseQueryBatchAssignmentRequest();
    message.dataRequestId = object.dataRequestId ?? "";
    return message;
  },
};

function createBaseQueryBatchAssignmentResponse(): QueryBatchAssignmentResponse {
  return { batchNumber: 0 };
}

export const QueryBatchAssignmentResponse = {
  encode(message: QueryBatchAssignmentResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNumber !== 0) {
      writer.uint32(8).uint64(message.batchNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryBatchAssignmentResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBatchAssignmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batchNumber = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBatchAssignmentResponse {
    return { batchNumber: isSet(object.batchNumber) ? globalThis.Number(object.batchNumber) : 0 };
  },

  toJSON(message: QueryBatchAssignmentResponse): unknown {
    const obj: any = {};
    if (message.batchNumber !== 0) {
      obj.batchNumber = Math.round(message.batchNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBatchAssignmentResponse>): QueryBatchAssignmentResponse {
    return QueryBatchAssignmentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBatchAssignmentResponse>): QueryBatchAssignmentResponse {
    const message = createBaseQueryBatchAssignmentResponse();
    message.batchNumber = object.batchNumber ?? 0;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Batch returns a batch given the batch number. */
  Batch(request: QueryBatchRequest): Promise<QueryBatchResponse>;
  /** BatchForHeight returns a batch created at a given block height. */
  BatchForHeight(request: QueryBatchForHeightRequest): Promise<QueryBatchForHeightResponse>;
  /** Batch returns all batches in the store. */
  Batches(request: QueryBatchesRequest): Promise<QueryBatchesResponse>;
  /** TreeEntries returns the tree entries from the given batch number. */
  TreeEntries(request: QueryTreeEntriesRequest): Promise<QueryTreeEntriesResponse>;
  /**
   * BatchSignatures returns the batch signatures for the given batch
   * and the
   */
  BatchSignatures(request: QueryBatchSignaturesRequest): Promise<QueryBatchSignaturesResponse>;
  /**
   * DataResult returns a data result given its associated data request's
   * ID.
   */
  DataResult(request: QueryDataResultRequest): Promise<QueryDataResultResponse>;
  /**
   * BatchAssignment returns the batch number that a given data request
   * has been assigned to.
   */
  BatchAssignment(request: QueryBatchAssignmentRequest): Promise<QueryBatchAssignmentResponse>;
}

export const QueryServiceName = "sedachain.batching.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Batch = this.Batch.bind(this);
    this.BatchForHeight = this.BatchForHeight.bind(this);
    this.Batches = this.Batches.bind(this);
    this.TreeEntries = this.TreeEntries.bind(this);
    this.BatchSignatures = this.BatchSignatures.bind(this);
    this.DataResult = this.DataResult.bind(this);
    this.BatchAssignment = this.BatchAssignment.bind(this);
  }
  Batch(request: QueryBatchRequest): Promise<QueryBatchResponse> {
    const data = QueryBatchRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Batch", data);
    return promise.then((data) => QueryBatchResponse.decode(_m0.Reader.create(data)));
  }

  BatchForHeight(request: QueryBatchForHeightRequest): Promise<QueryBatchForHeightResponse> {
    const data = QueryBatchForHeightRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BatchForHeight", data);
    return promise.then((data) => QueryBatchForHeightResponse.decode(_m0.Reader.create(data)));
  }

  Batches(request: QueryBatchesRequest): Promise<QueryBatchesResponse> {
    const data = QueryBatchesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Batches", data);
    return promise.then((data) => QueryBatchesResponse.decode(_m0.Reader.create(data)));
  }

  TreeEntries(request: QueryTreeEntriesRequest): Promise<QueryTreeEntriesResponse> {
    const data = QueryTreeEntriesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TreeEntries", data);
    return promise.then((data) => QueryTreeEntriesResponse.decode(_m0.Reader.create(data)));
  }

  BatchSignatures(request: QueryBatchSignaturesRequest): Promise<QueryBatchSignaturesResponse> {
    const data = QueryBatchSignaturesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BatchSignatures", data);
    return promise.then((data) => QueryBatchSignaturesResponse.decode(_m0.Reader.create(data)));
  }

  DataResult(request: QueryDataResultRequest): Promise<QueryDataResultResponse> {
    const data = QueryDataResultRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DataResult", data);
    return promise.then((data) => QueryDataResultResponse.decode(_m0.Reader.create(data)));
  }

  BatchAssignment(request: QueryBatchAssignmentRequest): Promise<QueryBatchAssignmentResponse> {
    const data = QueryBatchAssignmentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BatchAssignment", data);
    return promise.then((data) => QueryBatchAssignmentResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/batching/v1/genesis.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Batch, Params, TreeEntries } from "./batching";

/** GenesisState defines the batching module's genesis state. */
export interface GenesisState {
  /**
   * current_batch_number is the batch number of the most recently-
   * created batch.
   */
  currentBatchNumber: number;
  batches: Batch[];
  treeEntries: TreeEntries[];
  params: Params | undefined;
}

function createBaseGenesisState(): GenesisState {
  return { currentBatchNumber: 0, batches: [], treeEntries: [], params: undefined };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentBatchNumber !== 0) {
      writer.uint32(8).uint64(message.currentBatchNumber);
    }
    for (const v of message.batches) {
      Batch.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.treeEntries) {
      TreeEntries.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.currentBatchNumber = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.batches.push(Batch.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.treeEntries.push(TreeEntries.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      currentBatchNumber: isSet(object.currentBatchNumber) ? globalThis.Number(object.currentBatchNumber) : 0,
      batches: globalThis.Array.isArray(object?.batches) ? object.batches.map((e: any) => Batch.fromJSON(e)) : [],
      treeEntries: globalThis.Array.isArray(object?.treeEntries)
        ? object.treeEntries.map((e: any) => TreeEntries.fromJSON(e))
        : [],
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.currentBatchNumber !== 0) {
      obj.currentBatchNumber = Math.round(message.currentBatchNumber);
    }
    if (message.batches?.length) {
      obj.batches = message.batches.map((e) => Batch.toJSON(e));
    }
    if (message.treeEntries?.length) {
      obj.treeEntries = message.treeEntries.map((e) => TreeEntries.toJSON(e));
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.currentBatchNumber = object.currentBatchNumber ?? 0;
    message.batches = object.batches?.map((e) => Batch.fromPartial(e)) || [];
    message.treeEntries = object.treeEntries?.map((e) => TreeEntries.fromPartial(e)) || [];
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

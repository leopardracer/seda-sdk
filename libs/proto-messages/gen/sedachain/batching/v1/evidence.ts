// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/batching/v1/evidence.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

/**
 * BatchDoubleSign implements the Evidence interface and defines evidence of
 * double signing a batch for a given proving scheme.
 */
export interface BatchDoubleSign {
  /** batch_number is the number of the batch that the validator double signed. */
  batchNumber: bigint;
  /**
   * block_height is the height of the block which includes the batch that the
   * validator double signed.
   */
  blockHeight: bigint;
  /**
   * operator_address is the operator address of the validator committing the
   * double signing.
   */
  operatorAddress: string;
  /** validator_root is the hex-encoded root of the validator merkle tree. */
  validatorRoot: string;
  /** data_result_root is the hex-encoded root of the data result merkle tree. */
  dataResultRoot: string;
  /** proving_metadata_hash is the hex-encoded hash of the proving metadata. */
  provingMetadataHash: string;
  /** signature is the hex-encoded signature of the validator. */
  signature: string;
  /** proving_scheme_index is the SEDA key index of the proving scheme. */
  provingSchemeIndex: number;
}

function createBaseBatchDoubleSign(): BatchDoubleSign {
  return {
    batchNumber: 0n,
    blockHeight: 0n,
    operatorAddress: "",
    validatorRoot: "",
    dataResultRoot: "",
    provingMetadataHash: "",
    signature: "",
    provingSchemeIndex: 0,
  };
}

export const BatchDoubleSign = {
  encode(message: BatchDoubleSign, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batchNumber !== 0n) {
      if (BigInt.asUintN(64, message.batchNumber) !== message.batchNumber) {
        throw new globalThis.Error("value provided for field message.batchNumber of type uint64 too large");
      }
      writer.uint32(8).uint64(message.batchNumber.toString());
    }
    if (message.blockHeight !== 0n) {
      if (BigInt.asIntN(64, message.blockHeight) !== message.blockHeight) {
        throw new globalThis.Error("value provided for field message.blockHeight of type int64 too large");
      }
      writer.uint32(16).int64(message.blockHeight.toString());
    }
    if (message.operatorAddress !== "") {
      writer.uint32(26).string(message.operatorAddress);
    }
    if (message.validatorRoot !== "") {
      writer.uint32(34).string(message.validatorRoot);
    }
    if (message.dataResultRoot !== "") {
      writer.uint32(42).string(message.dataResultRoot);
    }
    if (message.provingMetadataHash !== "") {
      writer.uint32(50).string(message.provingMetadataHash);
    }
    if (message.signature !== "") {
      writer.uint32(58).string(message.signature);
    }
    if (message.provingSchemeIndex !== 0) {
      writer.uint32(64).uint32(message.provingSchemeIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BatchDoubleSign {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchDoubleSign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.batchNumber = longToBigint(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToBigint(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.validatorRoot = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dataResultRoot = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.provingMetadataHash = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.provingSchemeIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchDoubleSign {
    return {
      batchNumber: isSet(object.batchNumber) ? BigInt(object.batchNumber) : 0n,
      blockHeight: isSet(object.blockHeight) ? BigInt(object.blockHeight) : 0n,
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
      validatorRoot: isSet(object.validatorRoot) ? globalThis.String(object.validatorRoot) : "",
      dataResultRoot: isSet(object.dataResultRoot) ? globalThis.String(object.dataResultRoot) : "",
      provingMetadataHash: isSet(object.provingMetadataHash) ? globalThis.String(object.provingMetadataHash) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      provingSchemeIndex: isSet(object.provingSchemeIndex) ? globalThis.Number(object.provingSchemeIndex) : 0,
    };
  },

  toJSON(message: BatchDoubleSign): unknown {
    const obj: any = {};
    if (message.batchNumber !== 0n) {
      obj.batchNumber = message.batchNumber.toString();
    }
    if (message.blockHeight !== 0n) {
      obj.blockHeight = message.blockHeight.toString();
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    if (message.validatorRoot !== "") {
      obj.validatorRoot = message.validatorRoot;
    }
    if (message.dataResultRoot !== "") {
      obj.dataResultRoot = message.dataResultRoot;
    }
    if (message.provingMetadataHash !== "") {
      obj.provingMetadataHash = message.provingMetadataHash;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.provingSchemeIndex !== 0) {
      obj.provingSchemeIndex = Math.round(message.provingSchemeIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<BatchDoubleSign>): BatchDoubleSign {
    return BatchDoubleSign.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchDoubleSign>): BatchDoubleSign {
    const message = createBaseBatchDoubleSign();
    message.batchNumber = object.batchNumber ?? 0n;
    message.blockHeight = object.blockHeight ?? 0n;
    message.operatorAddress = object.operatorAddress ?? "";
    message.validatorRoot = object.validatorRoot ?? "";
    message.dataResultRoot = object.dataResultRoot ?? "";
    message.provingMetadataHash = object.provingMetadataHash ?? "";
    message.signature = object.signature ?? "";
    message.provingSchemeIndex = object.provingSchemeIndex ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToBigint(long: Long) {
  return BigInt(long.toString());
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

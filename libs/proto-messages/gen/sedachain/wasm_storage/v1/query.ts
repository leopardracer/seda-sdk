// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: sedachain/wasm_storage/v1/query.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { DataRequestWasm, ExecutorWasm } from "./wasm_storage";

/** The request message for QueryDataRequestWasm RPC. */
export interface QueryDataRequestWasmRequest {
  hash: string;
}

/** The response message for QueryDataRequestWasm RPC. */
export interface QueryDataRequestWasmResponse {
  wasm: DataRequestWasm | undefined;
}

/** The request message for QueryDataRequestWasms RPC. */
export interface QueryDataRequestWasmsRequest {
}

/** The response message for QueryDataRequestWasms RPC. */
export interface QueryDataRequestWasmsResponse {
  list: string[];
}

/** The request message for QueryExecutorWasm RPC. */
export interface QueryExecutorWasmRequest {
  hash: string;
}

/** The response message for QueryExecutorWasm RPC. */
export interface QueryExecutorWasmResponse {
  wasm: ExecutorWasm | undefined;
}

/** The request message for QueryExecutorWasms RPC. */
export interface QueryExecutorWasmsRequest {
}

/** The response message for QueryExecutorWasms RPC. */
export interface QueryExecutorWasmsResponse {
  list: string[];
}

/** The request message for QueryCoreContractRegistry RPC. */
export interface QueryCoreContractRegistryRequest {
}

/** The response message for QueryCoreContractRegistry RPC. */
export interface QueryCoreContractRegistryResponse {
  address: string;
}

function createBaseQueryDataRequestWasmRequest(): QueryDataRequestWasmRequest {
  return { hash: "" };
}

export const QueryDataRequestWasmRequest = {
  encode(message: QueryDataRequestWasmRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDataRequestWasmRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDataRequestWasmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDataRequestWasmRequest {
    return { hash: isSet(object.hash) ? globalThis.String(object.hash) : "" };
  },

  toJSON(message: QueryDataRequestWasmRequest): unknown {
    const obj: any = {};
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDataRequestWasmRequest>): QueryDataRequestWasmRequest {
    return QueryDataRequestWasmRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDataRequestWasmRequest>): QueryDataRequestWasmRequest {
    const message = createBaseQueryDataRequestWasmRequest();
    message.hash = object.hash ?? "";
    return message;
  },
};

function createBaseQueryDataRequestWasmResponse(): QueryDataRequestWasmResponse {
  return { wasm: undefined };
}

export const QueryDataRequestWasmResponse = {
  encode(message: QueryDataRequestWasmResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.wasm !== undefined) {
      DataRequestWasm.encode(message.wasm, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDataRequestWasmResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDataRequestWasmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.wasm = DataRequestWasm.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDataRequestWasmResponse {
    return { wasm: isSet(object.wasm) ? DataRequestWasm.fromJSON(object.wasm) : undefined };
  },

  toJSON(message: QueryDataRequestWasmResponse): unknown {
    const obj: any = {};
    if (message.wasm !== undefined) {
      obj.wasm = DataRequestWasm.toJSON(message.wasm);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDataRequestWasmResponse>): QueryDataRequestWasmResponse {
    return QueryDataRequestWasmResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDataRequestWasmResponse>): QueryDataRequestWasmResponse {
    const message = createBaseQueryDataRequestWasmResponse();
    message.wasm = (object.wasm !== undefined && object.wasm !== null)
      ? DataRequestWasm.fromPartial(object.wasm)
      : undefined;
    return message;
  },
};

function createBaseQueryDataRequestWasmsRequest(): QueryDataRequestWasmsRequest {
  return {};
}

export const QueryDataRequestWasmsRequest = {
  encode(_: QueryDataRequestWasmsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDataRequestWasmsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDataRequestWasmsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryDataRequestWasmsRequest {
    return {};
  },

  toJSON(_: QueryDataRequestWasmsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryDataRequestWasmsRequest>): QueryDataRequestWasmsRequest {
    return QueryDataRequestWasmsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryDataRequestWasmsRequest>): QueryDataRequestWasmsRequest {
    const message = createBaseQueryDataRequestWasmsRequest();
    return message;
  },
};

function createBaseQueryDataRequestWasmsResponse(): QueryDataRequestWasmsResponse {
  return { list: [] };
}

export const QueryDataRequestWasmsResponse = {
  encode(message: QueryDataRequestWasmsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.list) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDataRequestWasmsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDataRequestWasmsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.list.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDataRequestWasmsResponse {
    return { list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: QueryDataRequestWasmsResponse): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDataRequestWasmsResponse>): QueryDataRequestWasmsResponse {
    return QueryDataRequestWasmsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDataRequestWasmsResponse>): QueryDataRequestWasmsResponse {
    const message = createBaseQueryDataRequestWasmsResponse();
    message.list = object.list?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryExecutorWasmRequest(): QueryExecutorWasmRequest {
  return { hash: "" };
}

export const QueryExecutorWasmRequest = {
  encode(message: QueryExecutorWasmRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryExecutorWasmRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryExecutorWasmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryExecutorWasmRequest {
    return { hash: isSet(object.hash) ? globalThis.String(object.hash) : "" };
  },

  toJSON(message: QueryExecutorWasmRequest): unknown {
    const obj: any = {};
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryExecutorWasmRequest>): QueryExecutorWasmRequest {
    return QueryExecutorWasmRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryExecutorWasmRequest>): QueryExecutorWasmRequest {
    const message = createBaseQueryExecutorWasmRequest();
    message.hash = object.hash ?? "";
    return message;
  },
};

function createBaseQueryExecutorWasmResponse(): QueryExecutorWasmResponse {
  return { wasm: undefined };
}

export const QueryExecutorWasmResponse = {
  encode(message: QueryExecutorWasmResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.wasm !== undefined) {
      ExecutorWasm.encode(message.wasm, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryExecutorWasmResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryExecutorWasmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.wasm = ExecutorWasm.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryExecutorWasmResponse {
    return { wasm: isSet(object.wasm) ? ExecutorWasm.fromJSON(object.wasm) : undefined };
  },

  toJSON(message: QueryExecutorWasmResponse): unknown {
    const obj: any = {};
    if (message.wasm !== undefined) {
      obj.wasm = ExecutorWasm.toJSON(message.wasm);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryExecutorWasmResponse>): QueryExecutorWasmResponse {
    return QueryExecutorWasmResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryExecutorWasmResponse>): QueryExecutorWasmResponse {
    const message = createBaseQueryExecutorWasmResponse();
    message.wasm = (object.wasm !== undefined && object.wasm !== null)
      ? ExecutorWasm.fromPartial(object.wasm)
      : undefined;
    return message;
  },
};

function createBaseQueryExecutorWasmsRequest(): QueryExecutorWasmsRequest {
  return {};
}

export const QueryExecutorWasmsRequest = {
  encode(_: QueryExecutorWasmsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryExecutorWasmsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryExecutorWasmsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryExecutorWasmsRequest {
    return {};
  },

  toJSON(_: QueryExecutorWasmsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryExecutorWasmsRequest>): QueryExecutorWasmsRequest {
    return QueryExecutorWasmsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryExecutorWasmsRequest>): QueryExecutorWasmsRequest {
    const message = createBaseQueryExecutorWasmsRequest();
    return message;
  },
};

function createBaseQueryExecutorWasmsResponse(): QueryExecutorWasmsResponse {
  return { list: [] };
}

export const QueryExecutorWasmsResponse = {
  encode(message: QueryExecutorWasmsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.list) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryExecutorWasmsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryExecutorWasmsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.list.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryExecutorWasmsResponse {
    return { list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: QueryExecutorWasmsResponse): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryExecutorWasmsResponse>): QueryExecutorWasmsResponse {
    return QueryExecutorWasmsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryExecutorWasmsResponse>): QueryExecutorWasmsResponse {
    const message = createBaseQueryExecutorWasmsResponse();
    message.list = object.list?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryCoreContractRegistryRequest(): QueryCoreContractRegistryRequest {
  return {};
}

export const QueryCoreContractRegistryRequest = {
  encode(_: QueryCoreContractRegistryRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryCoreContractRegistryRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCoreContractRegistryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryCoreContractRegistryRequest {
    return {};
  },

  toJSON(_: QueryCoreContractRegistryRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryCoreContractRegistryRequest>): QueryCoreContractRegistryRequest {
    return QueryCoreContractRegistryRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryCoreContractRegistryRequest>): QueryCoreContractRegistryRequest {
    const message = createBaseQueryCoreContractRegistryRequest();
    return message;
  },
};

function createBaseQueryCoreContractRegistryResponse(): QueryCoreContractRegistryResponse {
  return { address: "" };
}

export const QueryCoreContractRegistryResponse = {
  encode(message: QueryCoreContractRegistryResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryCoreContractRegistryResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCoreContractRegistryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryCoreContractRegistryResponse {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryCoreContractRegistryResponse): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryCoreContractRegistryResponse>): QueryCoreContractRegistryResponse {
    return QueryCoreContractRegistryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryCoreContractRegistryResponse>): QueryCoreContractRegistryResponse {
    const message = createBaseQueryCoreContractRegistryResponse();
    message.address = object.address ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** DataRequestWasm returns a data request wasm given its hash. */
  DataRequestWasm(request: QueryDataRequestWasmRequest): Promise<QueryDataRequestWasmResponse>;
  /** DataRequestWasms returns all data request wasms. */
  DataRequestWasms(request: QueryDataRequestWasmsRequest): Promise<QueryDataRequestWasmsResponse>;
  /** ExecutorWasm returns an executor wasm given its hash. */
  ExecutorWasm(request: QueryExecutorWasmRequest): Promise<QueryExecutorWasmResponse>;
  /** ExecutorWasms returns all executor wasms. */
  ExecutorWasms(request: QueryExecutorWasmsRequest): Promise<QueryExecutorWasmsResponse>;
  /** CoreContractRegistry returns the Core Contract Registry address. */
  CoreContractRegistry(request: QueryCoreContractRegistryRequest): Promise<QueryCoreContractRegistryResponse>;
}

export const QueryServiceName = "sedachain.wasm_storage.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.DataRequestWasm = this.DataRequestWasm.bind(this);
    this.DataRequestWasms = this.DataRequestWasms.bind(this);
    this.ExecutorWasm = this.ExecutorWasm.bind(this);
    this.ExecutorWasms = this.ExecutorWasms.bind(this);
    this.CoreContractRegistry = this.CoreContractRegistry.bind(this);
  }
  DataRequestWasm(request: QueryDataRequestWasmRequest): Promise<QueryDataRequestWasmResponse> {
    const data = QueryDataRequestWasmRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DataRequestWasm", data);
    return promise.then((data) => QueryDataRequestWasmResponse.decode(_m0.Reader.create(data)));
  }

  DataRequestWasms(request: QueryDataRequestWasmsRequest): Promise<QueryDataRequestWasmsResponse> {
    const data = QueryDataRequestWasmsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DataRequestWasms", data);
    return promise.then((data) => QueryDataRequestWasmsResponse.decode(_m0.Reader.create(data)));
  }

  ExecutorWasm(request: QueryExecutorWasmRequest): Promise<QueryExecutorWasmResponse> {
    const data = QueryExecutorWasmRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ExecutorWasm", data);
    return promise.then((data) => QueryExecutorWasmResponse.decode(_m0.Reader.create(data)));
  }

  ExecutorWasms(request: QueryExecutorWasmsRequest): Promise<QueryExecutorWasmsResponse> {
    const data = QueryExecutorWasmsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ExecutorWasms", data);
    return promise.then((data) => QueryExecutorWasmsResponse.decode(_m0.Reader.create(data)));
  }

  CoreContractRegistry(request: QueryCoreContractRegistryRequest): Promise<QueryCoreContractRegistryResponse> {
    const data = QueryCoreContractRegistryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CoreContractRegistry", data);
    return promise.then((data) => QueryCoreContractRegistryResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
